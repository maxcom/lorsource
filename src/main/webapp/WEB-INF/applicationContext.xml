<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 1998-2013 Linux.org.ru
  ~    Licensed under the Apache License, Version 2.0 (the "License");
  ~    you may not use this file except in compliance with the License.
  ~    You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~    Unless required by applicable law or agreed to in writing, software
  ~    distributed under the License is distributed on an "AS IS" BASIS,
  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~    See the License for the specific language governing permissions and
  ~    limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
      ">

    <context:component-scan base-package="ru.org.linux">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="regex" expression=".*Test.*"/>
    </context:component-scan>
    
    <context:annotation-config/>
    <cache:annotation-driven />

    <bean class="org.springframework.beans.factory.config.PropertiesFactoryBean" scope="singleton"
          name="properties">
        <property name="locations">
            <list>
                <value>/WEB-INF/config.properties.dist</value>
                <value>/WEB-INF/config.properties</value>
            </list>
        </property>
        <property name="ignoreResourceNotFound" value="true"/>
    </bean>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
          id="configurer">
        <property name="properties" ref="properties"/>
    </bean>

    <bean class="org.springframework.jndi.JndiObjectFactoryBean" name="datasource">
        <property name="jndiName" value="java:/comp/env/jdbc/lor"/>
    </bean>

    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"/>
    </bean>

    <tx:annotation-driven transaction-manager="txManager"/>

    <bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
        <constructor-arg ref="datasource"/>
    </bean>

    <bean class="ru.org.linux.spring.commons.MemCachedProvider" id="cacheProvider"
          destroy-method="destroy"/>

    <bean id="reCaptcha" class="net.tanesha.recaptcha.ReCaptchaImpl">
        <property name="privateKey" value="${recaptcha.private}"/>
        <property name="publicKey" value="${recaptcha.public}"/>
        <property name="recaptchaServer" value="https://www.google.com/recaptcha/api"/>
        <!-- Or, if you want to use SSL, then use this:
                    <property name="recaptchaServer" value="http://secure-api.recaptcha.net" />
            -->
        <property name="includeNoscript" value="true"/>
    </bean>

    <bean class="org.apache.xmlrpc.client.XmlRpcClientConfigImpl"/>

    <!-- enabling jmx causes tomcat stop lock -->
    <amq:broker useJmx="false" persistent="true" dataDirectory="${PathPrefix}/activemq">
        <amq:transportConnectors>
            <amq:transportConnector uri="vm://localhost"/>
        </amq:transportConnectors>
    </amq:broker>

    <amq:redeliveryPolicy id="redeliveryPolicy" maximumRedeliveries="-1"
                          initialRedeliveryDelay="60000">
	<property name="queue" value="*" />
    </amq:redeliveryPolicy>

    <amq:connectionFactory id="jmsFactory" brokerURL="vm://localhost?create=false">
        <property name="redeliveryPolicy" ref="redeliveryPolicy"/>
    </amq:connectionFactory>

    <amq:queue id="searchQueue" physicalName="lor.searchQueue"/>

    <!-- lets wrap in a pool to avoid creating a connection per send -->
    <bean
            id="jmsConnectionFactory"
            class="org.springframework.jms.connection.SingleConnectionFactory">
        <property name="targetConnectionFactory">
            <ref local="jmsFactory"/>
        </property>
    </bean>

    <bean id="myJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
    </bean>

    <!-- unfortunately shutdown method do not kill all threads, we need to call shutdownAll -->
    <bean id="httpConnectionManager" destroy-method="shutdownAll"
          class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"/>

    <bean id="httpClient" class="ru.org.linux.search.SearchHttpClientFactoryBean">
        <property name="connectionManager" ref="httpConnectionManager"/>
        <property name="username" value="${solr.username}"/>
        <property name="password" value="${solr.password}"/>
        <property name="host" value="${solr.host}"/>
        <property name="port" value="${solr.port}"/>
    </bean>

    <bean id="solr" class="org.apache.solr.client.solrj.impl.CommonsHttpSolrServer">
        <constructor-arg type="java.lang.String" value="${solr.url}"/>
        <constructor-arg ref="httpClient"/>

        <property name="requestWriter">
            <bean id="binaryRequestWriter"
                  class="org.apache.solr.client.solrj.impl.BinaryRequestWriter"/>
        </property>
        <property name="maxRetries" value="1"/>
    </bean>

    <bean id="messageListener"
          class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
        <constructor-arg ref="searchQueueListener"/>
    </bean>

    <bean id="jmsContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="messageListener" ref="messageListener"/>
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
        <property name="destination" ref="searchQueue"/>
        <property name="sessionTransacted" value="true"/>
        <property name="concurrency" value="1"/>
    </bean>

    <task:annotation-driven/>

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" p:cache-manager-ref="ehcache"/>

    <!-- Ehcache library setup -->
    <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>

     <bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
         <property name="locateExistingServerIfPossible" value="true"/>
     </bean>

    <bean class="net.sf.ehcache.management.ManagementService" init-method="init">
        <constructor-arg ref="ehcache"/>
        <constructor-arg ref="mbeanServer"/>
        <constructor-arg value="true"/>
        <constructor-arg value="true"/>
        <constructor-arg value="true"/>
        <constructor-arg value="true"/>
        <constructor-arg value="false"/>
    </bean>

    <bean id="templateLoader" class="de.neuland.jade4j.spring.template.SpringTemplateLoader">
        <property name="basePath" value="template/" />
    </bean>

    <bean id="jadeConfiguration" class="de.neuland.jade4j.JadeConfiguration">
        <property name="prettyPrint" value="false" />
        <property name="caching" value="false" />
        <property name="templateLoader" ref="templateLoader" />
    </bean>

    <bean id="TemplateSign" factory-bean="jadeConfiguration" factory-method="getTemplate">
        <constructor-arg value="sign"/>
    </bean>
    <bean id="TemplateComment" factory-bean="jadeConfiguration" factory-method="getTemplate">
        <constructor-arg value="comment"/>
    </bean>
</beans>
